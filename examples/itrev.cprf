Lemma itrev_rev: itrev xs ys .=. reverse xs ++ ys

Proof by induction on List xs

Case [] -- base case

                            itrev [] ys
    (by def itrev)      .=. ys

    reverse [] ++ ys
    (by def reverse)    .=. [] ++ ys
    (by def ++)         .=. ys

Case :  -- induction step

                            itrev (x:xs) ys
    (by def itrev)      .=. itrev xs (x:ys)
    (by IH)             .=. reverse xs ++ (x:ys)

    reverse (x:xs) ++ ys
    (by def reverse)    .=. (reverse xs ++ [x]) ++ ys
    (by app_assoc)      .=. reverse xs ++ ([x] ++ ys)
    (by def ++)         .=. reverse xs ++ (x : ([] ++ ys))
    (by def ++)         .=. reverse xs ++ (x:ys)

QED


Lemma app_Nil: xs ++ [] .=. xs

Proof by induction on List xs

Case []

                            [] ++ []
    (by def ++)         .=. []

Case :

                            (x:xs) ++ []
    (by def ++)         .=. x : (xs ++ [])
    (by IH)             .=. x : xs

QED


Lemma: itrev xs [] .=. reverse xs

Proof

                            itrev xs []
    (by itrev_rev)      .=. reverse xs ++ []
    (by app_Nil)        .=. reverse xs

QED
